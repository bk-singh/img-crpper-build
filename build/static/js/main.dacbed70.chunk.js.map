{"version":3,"sources":["ListCroppedImage.js","ListUploadedImage.js","Cropper.js","ImageCropperRouter.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","styled","canvas","ListCroppedImage","data","showCroppedFile","map","i","key","hidden","width","height","id","className","Img","img","ListUploadedImage","url","src","alt","Container","div","Button","button","Cropper","history","useState","file","setFile","base64Data","setBase64Data","responseData","setResponseData","setShowCroppedFile","showUploadedFile","setShowUploadedFile","handleOnClick","crop","base64","forEach","push","document","getElementById","concat","image","Image","getContext","drawImage","sx","sy","sWidth","sHeight","x","y","toDataURL","drawCroppedImg","redirectToUrl","uploadImage","images","a","fetch","method","headers","Accept","body","JSON","stringify","imgs","type","onClick","length","alert","then","response","json","catch","error","accept","onChange","e","blobSrc","URL","createObjectURL","target","files","setTimeout","value","ImageCropperRouter","path","exact","render","routeProps","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.dacbed70.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Canvas = styled.canvas`\n  margin: 20px;\n`;\n\nfunction ListCroppedImage({ data, showCroppedFile }) {\n  return (\n    <div>\n      {[0, 1, 2, 3].map((i) => (\n        <div key={i + 100} hidden={!showCroppedFile}>\n          <h3\n            key={i + 1000}\n          >{`Cropped Image: ${data[i].width} x ${data[i].height}`}</h3>\n          <Canvas id={`img-canvas-${i}`} key={i} className=\"canvas\" />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ListCroppedImage;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Img = styled.img`\n  margin: 20px;\n`;\n\nfunction ListUploadedImage({ data }) {\n  return (\n    data && (\n      <div>\n        <h3>Uploaded Images</h3>\n        {data.map((img, i) => {\n          const { url } = img;\n          return (\n            <div key={i + 10}>\n              <Img key={i} src={url} alt={url} />\n              <h5 key={i + 100}>{url}</h5>\n              <br key={i + 1000} />\n            </div>\n          );\n        })}\n      </div>\n    )\n  );\n}\n\nexport default ListUploadedImage;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ListCroppedImage from \"./ListCroppedImage\";\nimport ListUploadedImage from \"./ListUploadedImage\";\n\nconst Container = styled.div`\n  margin: 50px;\n  padding: 30px;\n  border: 1px solid grey;\n`;\n\nconst Button = styled.button`\n  background-color: lightblue;\n  padding: 10px;\n  margin: 20px;\n`;\n\nfunction Cropper({ history, data }) {\n  const [file, setFile] = useState(null);\n  const [base64Data, setBase64Data] = useState([]);\n  const [responseData, setResponseData] = useState([]);\n  const [showCroppedFile, setShowCroppedFile] = useState(false);\n  const [showUploadedFile, setShowUploadedFile] = useState(false);\n\n  const onFileChange = (e) => {\n    const blobSrc = URL.createObjectURL(e.target.files[0]);\n    let image = new Image();\n    image.src = blobSrc;\n    setTimeout(() => {\n      if (image.width !== 1024 && image.height !== 1024) {\n        alert(\"Image should be exactly 1024 x 1024.\");\n        const fileInput = document.getElementById(\"upload-file\");\n        fileInput.value = \"\";\n        return;\n      }\n      setFile(image.src);\n    }, 1000);\n  };\n\n  const drawCroppedImg = (i, img, crop) => {\n    const canvas = document.getElementById(\"\".concat(\"img-canvas-\", i));\n    if (!canvas) return;\n    let image = new Image();\n    image.src = img;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(\n      image,\n      data[i].sx,\n      data[i].sy,\n      data[i].sWidth,\n      data[i].sHeight,\n      data[i].x,\n      data[i].y,\n      data[i].width,\n      data[i].height\n    );\n    return canvas.toDataURL(\"image/jpeg\", 1.0);\n  };\n\n  const handleOnClick = (img, crop) => {\n    let base64 = [];\n    [0, 1, 2, 3].forEach((i) =>\n      base64.push(\n        drawCroppedImg(i, img, {\n          width: data[i].width,\n          height: data[i].height,\n        })\n      )\n    );\n    setBase64Data(base64);\n    setShowCroppedFile(true);\n    redirectToUrl(history, \"/preview/\");\n  };\n  const uploadImage = async (images) => {\n    const url = \"/api/base64/images\";\n    return await fetch(url, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        imgs: images,\n      }),\n    });\n  };\n\n  const onUpload = () => {\n    if (!base64Data && !base64Data.length) {\n      return alert(\"Error uploading images\");\n    }\n\n    uploadImage(base64Data)\n      .then((response) => response.json())\n      .then((response) => {\n        setResponseData(response.data);\n        setShowUploadedFile(true);\n        redirectToUrl(history, \"/list/\");\n      })\n      .catch((error) => {\n        alert(error);\n      });\n  };\n  const redirectToUrl = (history, url) => {\n    history.push(url);\n  };\n\n  return (\n    <Container>\n      {showUploadedFile ? (\n        <ListUploadedImage data={responseData} />\n      ) : (\n        <div hidden={!showCroppedFile}>\n          <Button type=\"primary\" onClick={onUpload}>\n            Upload Cropped Images\n          </Button>\n          <ListCroppedImage data={data} showCroppedFile={showCroppedFile} />\n        </div>\n      )}\n      {!showCroppedFile && (\n        <div>\n          <h2>Crop Image</h2>\n          <span>Upload a file: </span>\n          <input\n            id=\"upload-file\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={onFileChange}\n          />\n          {file && (\n            <div>\n              <Button\n                type=\"primary\"\n                onClick={() =>\n                  handleOnClick(file, { width: 1024, height: 1024 })\n                }\n              >\n                View Cropped Images\n              </Button>\n              <br />\n              <h4>Original Image (1024 x 1024)</h4>\n              <div>\n                <img id=\"img-uploaded\" src={file} alt=\"original\" />\n              </div>\n              <br />\n            </div>\n          )}\n        </div>\n      )}\n    </Container>\n  );\n}\n\nexport default Cropper;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Cropper from \"./Cropper\";\n\nfunction ImageCropperRouter() {\n  const data = [\n    {\n      sx: 0,\n      sy: 0,\n      sWidth: 755,\n      sHeight: 450,\n      x: 0,\n      y: 0,\n      width: 755,\n      height: 450,\n    },\n    {\n      sx: 755,\n      sy: 0,\n      sWidth: 212,\n      sHeight: 365,\n      x: 0,\n      y: 0,\n      width: 212,\n      height: 365,\n    },\n    {\n      sx: 0,\n      sy: 450,\n      sWidth: 365,\n      sHeight: 450,\n      x: 0,\n      y: 0,\n      width: 365,\n      height: 450,\n    },\n    {\n      sx: 356,\n      sy: 450,\n      sWidth: 380,\n      sHeight: 480,\n      x: 0,\n      y: 0,\n      width: 380,\n      height: 380,\n    },\n  ];\n  return (\n    <Switch>\n      <Route\n        path=\"/preview/\"\n        exact\n        render={(routeProps) => (\n          <Cropper history={routeProps.history} data={data} />\n        )}\n      />\n      <Route\n        path=\"/list/\"\n        exact\n        render={(routeProps) => (\n          <Cropper history={routeProps.history} data={data} />\n        )}\n      />\n      <Route\n        path=\"/\"\n        render={(routeProps) => (\n          <Cropper history={routeProps.history} data={data} />\n        )}\n      />\n    </Switch>\n  );\n}\n\nexport default ImageCropperRouter;\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport ImageCropperRouter from \"./ImageCropperRouter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <ImageCropperRouter />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}